@page "/EntradasHuacales/Edit/{EntradaId:int}"
@using P1_AP1_YudelkaTorres.Models
@using P1_AP1_YudelkaTorres.Services
@using P1_AP1_YudelkaTorres.Extensors
@inject BlazorBootstrap.ToastService toastService
@inject EntradasHuacalesService EntradasHuacalesService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Editar Entrada de Huacales</PageTitle>

<EditForm Model="Entrada" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-sm">
            <div class="card-header text-center">
                <h5 class="card-title">Editar Entrada de Huacales</h5>
            </div>

            <div class="card-body">

                <div class="row">
                    @* EntradaId *@
                    <div class="mb-3">
                        <label class="form-label fw-bold">ID:</label>
                        <InputNumber class="form-control" @bind-Value="Entrada.EntradaId" readonly />
                    </div>

                    @* Fecha *@
                    <div class="mb-3">
                        <label class="form-label fw-bold">Fecha:</label>
                        <InputDate class="form-control" @bind-Value="Entrada.Fecha" />
                        <ValidationMessage For="() => Entrada.Fecha" />
                    </div>

                    @* Cliente *@
                    <div class="mb-3">
                        <label class="form-label fw-bold">Cliente:</label>
                        <InputText class="form-control" @bind-Value="Entrada.NombreCliente" />
                        <ValidationMessage For="() => Entrada.NombreCliente" />
                    </div>

                    @* Cantidad *@
                    <div class="mb-3">
                        <label class="form-label fw-bold">Cantidad:</label>
                        <InputNumber class="form-control" @bind-Value="Entrada.Cantidad" />
                        <ValidationMessage For="() => Entrada.Cantidad" />
                    </div>

                    @* Precio *@
                    <div class="mb-3">
                        <label class="form-label fw-bold">Precio:</label>
                        <InputNumber class="form-control" @bind-Value="Entrada.Precio" />
                        <ValidationMessage For="() => Entrada.Precio" />
                    </div>
                </div>

                @* Importe *@
                <div class="mb-3">
                    <label class="form-label fw-bold">Importe:</label>
                    <input class="form-control bg-light" value="@Importe.ToString("C")" readonly />
                </div>

                @*Detalle de huacales*@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles Huacales</h5>
                    <div class="row g-2 align-items-end mb-3">
                        <div class="col-md-4">
                            <label class="form-label"> Tipo de Huacal:</label>
                            <select class="form-select" @bind="DetalleSeleccionado.TipoId">
                                <option value="0" disabled>Seleccione un tipo</option>
                                @foreach (var entradashuacalesTipos in TiposDisponibles)
                                {
                                    var agregada = Entrada.EntradasHuacalesDetalle
                                    .Where(d => d.TipoId == entradashuacalesTipos.TipoId)
                                    .Sum(d => d.Cantidad);
                                    var restante = entradashuacalesTipos.Existencia - agregada;
                                    if (restante > 0)
                                    {
                                        <option value="@entradashuacalesTipos.TipoId">@entradashuacalesTipos.Descripción (Existencia: @restante)</option>
                                    }
                                }
                            </select>
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Cantidad:</label>
                            <InputNumber class="form-control" @bind-Value="DetalleSeleccionado.Cantidad" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Precio:</label>
                            <InputNumber class="form-control" @bind-Value="DetalleSeleccionado.Precio" />
                        </div>

                        <div class="col-md-2 d-flex justify-content-center">
                            <button type="button" class="btn btn-success bi bi-plus-circle" @onclick="AgregarDetalle"> Agregar</button>
                        </div>

                    </div>

                    @*Tabla de detalle*@
                    <table class="table table-bordered align-middle text-center">
                        <thead class="table table-striped">
                            <tr class="text-center">
                                <th>Tipo de Huacal:</th>
                                <th>Cantidad:</th>
                                <th>Precio:</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entradahuacaldetalle in Entrada.EntradasHuacalesDetalle)
                            {
                                <tr>
                                    <td>@ListaEntradasHuacalesTipos.FirstOrDefault(t => t.TipoId == entradahuacaldetalle.TipoId)?.Descripción</td>
                                    <td>@entradahuacaldetalle.Cantidad</td>
                                    <td>@entradahuacaldetalle.Precio</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-danger bi bi-trash"
                                                @onclick="() => RemoverentradahuacalDetalle(entradahuacaldetalle)"></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (!string.IsNullOrWhiteSpace(Mensaje))
                    {
                        <div class="alert alert-danger mt-3">@Mensaje</div>
                    }
                </div>

                @if (!string.IsNullOrWhiteSpace(Mensaje))
                {
                    <div class="alert alert-warning mt-2">@Mensaje</div>
                }

                @* Footer *@
                <div class="card-footer text-center mt-2">
                    <a href="/EntradasHuacales/Index" class="btn btn-secondary">
                        <span class="bi bi-arrow-left"></span> Volver
                    </a>
                    <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int EntradaId { get; set; }

    public EntradasHuacales Entrada { get; set; } = new()
    {
        EntradasHuacalesDetalle = new List<EntradasHuacalesDetalle>()
    };
    public EntradasHuacalesDetalle DetalleSeleccionado { get; set; } = new();
    public List<EntradasHuacalesTipos> ListaEntradasHuacalesTipos { get; set; } = new();
    public string Mensaje { get; set; } = string.Empty;
    public decimal Importe { get; set; }

    private IEnumerable<EntradasHuacalesTipos> TiposDisponibles =>
       ListaEntradasHuacalesTipos
           .Where(t => t.Existencia > Entrada.EntradasHuacalesDetalle
                       .Where(d => d.TipoId == t.TipoId)
                       .Sum(d => d.Cantidad));

    protected override async Task OnInitializedAsync()
    {
        ListaEntradasHuacalesTipos = await EntradasHuacalesService.ListarTipos();
        var entradaExistente = await EntradasHuacalesService.Buscar(EntradaId);
        if (entradaExistente != null)
        {
            Entrada = entradaExistente;
            CalcularImporte();
        }
        else
        {
            Mensaje = "No se encontró la entrada a editar.";
        }
    }

    private void AgregarDetalle()
    {
        if (DetalleSeleccionado.TipoId == 0)
        {
            Mensaje = "Debe seleccionar un tipo de huacal.";
            toastService.ShowError(Mensaje);
            return;
        }

        var EntradashuacalesTipos = ListaEntradasHuacalesTipos.First(t => t.TipoId == DetalleSeleccionado.TipoId);

        var cantidadAgregada = Entrada.EntradasHuacalesDetalle
                                .Where(d => d.TipoId == EntradashuacalesTipos.TipoId)
                                .Sum(d => d.Cantidad);

        var disponible = EntradashuacalesTipos.Existencia - cantidadAgregada;

        if (DetalleSeleccionado.Cantidad <= 0 || DetalleSeleccionado.Cantidad > disponible)
        {
            Mensaje = $"Cantidad inválida. Máximo disponible: {disponible}";
            toastService.ShowError(Mensaje);
            return;
        }

        Entrada.EntradasHuacalesDetalle.Add(new EntradasHuacalesDetalle
        {
            TipoId = DetalleSeleccionado.TipoId,
            Cantidad = DetalleSeleccionado.Cantidad,
            Precio = DetalleSeleccionado.Precio
        });
        DetalleSeleccionado = new EntradasHuacalesDetalle();
        toastService.ShowSuccess("Detalle agregado correctamente.");
        CalcularImporte();
    }

    private void RemoverentradahuacalDetalle(EntradasHuacalesDetalle entradasHuacalesDetalle)
    {
        Entrada.EntradasHuacalesDetalle.Remove(entradasHuacalesDetalle);
        DetalleSeleccionado = new EntradasHuacalesDetalle();
        CalcularImporte();
    }

    private void CalcularImporte(ChangeEventArgs? e = null)
    {
        Importe = Entrada.Cantidad * Entrada.Precio;
    }

    private async Task Guardar()
    {
        if (!Entrada.EntradasHuacalesDetalle.Any())
        {
            Mensaje = "Debe agregar al menos un huacal al detalle.";
            toastService.ShowError(Mensaje);
            return;
        }

        var guardado = await EntradasHuacalesService.Guardar(Entrada);

        if (guardado)
        {
            toastService.ShowSuccess("Entrada de huacales guardada correctamente");
            NavigationManager.NavigateTo("/EntradasHuacales/Index");
        }
        else
        {
            Mensaje = "Ocurrió un error al guardar la entrada.";
        }
    }
}

